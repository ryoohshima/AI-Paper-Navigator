// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and personalization
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  searches      Search[]
  favorites     Favorite[]
  
  @@map("users")
}

// Paper model to store paper metadata
model Paper {
  id            String    @id @default(cuid())
  arxivId       String?   @unique
  pubmedId      String?   @unique
  title         String
  abstract      String    @db.Text
  authors       String[]
  publishedDate DateTime?
  journal       String?
  doi           String?
  categories    String[]
  url           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  favorites     Favorite[]
  searchResults SearchResult[]
  
  @@map("papers")
}

// Search history
model Search {
  id            String    @id @default(cuid())
  query         String
  response      String    @db.Text
  userId        String?
  createdAt     DateTime  @default(now())
  
  // Relations
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  results       SearchResult[]
  
  @@map("searches")
}

// Junction table for search results
model SearchResult {
  id          String    @id @default(cuid())
  searchId    String
  paperId     String
  relevance   Float?
  createdAt   DateTime  @default(now())
  
  // Relations
  search      Search    @relation(fields: [searchId], references: [id], onDelete: Cascade)
  paper       Paper     @relation(fields: [paperId], references: [id], onDelete: Cascade)
  
  @@unique([searchId, paperId])
  @@map("search_results")
}

// Favorite papers for users
model Favorite {
  id          String    @id @default(cuid())
  userId      String
  paperId     String
  note        String?
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  paper       Paper     @relation(fields: [paperId], references: [id], onDelete: Cascade)
  
  @@unique([userId, paperId])
  @@map("favorites")
}
